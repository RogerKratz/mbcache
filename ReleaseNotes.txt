--- RELEASE NOTES, Breaking changes ---

- vNext
* InMemoryCache's timeout now specified in TimeSpan instead of int.


- Version 2.15 (v 2.15.0.0), 2018-12-20
* Replacing IEventListener.Warning with FluentBuilder.AllowDifferentArgumentsShareSameCacheKey
* ICacheKey.Initialize removed
* IProxyFactory.Initialize removed
* ICache.GetAndPutIfNonExisting param changed from CachedMethodInformation to MethodInfo
* CachedItem.CachedMethodInformation replaced with CachedMethod
* IFluentBuilder removed. Use FluentBuilder instead.
* FluentBuilder.CacheKey renamed to FluentBuilder.OverrideCacheKey
* FluentBuilder.Cache renamed to FluentBuilder.OverrideCache


- Version 2.14 (v 2.14.0.0), 2018-05-14
* EventInformation.Type removed. Use CachedMethodInformation.Method.DeclaringType instead.
* ICache.GetAndPutIfNotExisting no longer accepts dependingRemoveKeys as param. It's now part of CachedMethodInformation.
* Adding KeyAndItsDependingKeys to ICache.GetAndPutIfNotExisting.
* ICache.GetAndPutIfNonExisting now only returns cached value.
* ICache.Delete now accept cacheKey as a simple string.
* EventInformation/CachedMethodInformation.KeyAndItsDependingKeys removed.


- Version 2.13 (v 2.13.0.0), 2018-01-03
* Having non virtual cached methods on class components now always throws


- Version 2.12 (v 2.12.0.0), 2018-01-02
* Removing ILockObjectGenerator
* Removing ILockObjectGenerator ctor param from InMemoryCache


- Version 2.11 (v 2.11.0.0), 2017-05-10
* EventInformation.MethodName() removed


- Version 2.10 (v 2.10.0.0), 2015-11-13
* ICacheKey.Initialize added
* IEventListener.Warning added


- Version 2.9 (v 2.9.0.0), 2015-09-17
* IProxyFactory.Initialize no longer takes ICacheKey as arg
* ICache changed. ICacheKeyUnwrapper moved from Initialize to GetAndPutIfNotExisting
* ICacheKey methods completly renamed. Methods are named if they are used for get/put or for removing from cache.
* CacheKeyBase.KeyStart removed. Added CacheKeyBase.Scope instead.


- Version 2.8 (v 2.8.0.0), 2015-09-02
* IProxyFactory.AllowNonVirtualMember removed
* CacheKeyBase.KeyStart is now a method and not a property
* ICache.Clear() added


- Version 2.7 (v 2.7.0.0), 2015-08-18
* IProxyFactory.Initialize no longer accepts an ILockObjectGenerator. No need for implementations to set locks. Locks are handled internally by CacheAdapter instead.
* ICache.Get/Put replaced with GetAndPutIfNonExisting
* IEventListener rewritten


- Version 2.6 (v 2.6.0.0), 2014-06-25
* No known breaking changes


- Version 2.5 (v 2.5.0.0), 2014-02-28
* T IProxyFactory.CreateProxyWithTarget<T>(T uncachedComponent, ConfigurationForType configurationForType) added
* T IMbCacheFactory.ToCachedComponent<T>(T uncachedComponent) added


- Version 2.4 (v 2.4.0.0), 2013-12-09
* ICacheKey now accepts ComponentType as inparameters instead of System.Type


- Version 2.3 (v 2.3.0.0), 2013-05-30
* No known breaking changes


- Version 2.2 (v 2.2.0.0), 2013-03-18
* No known breaking changes


- Version 2.1 (v 2.1.0.0), 2013-01-15
* IEventListener methods now accepts CachedItem as input
* IEventListener.OnGet now split into two methods - one for successful Get another for unsuccessful.
* ICache signatures changed
* Implementor of ICache must call corresponding methods on EventListenersCallback after cache action has occured


- Version 2.0 (v 2.0.2.0), 2012-12-06
* ICache.Initialize(ICacheKey) added
* ICacheKey.UnwrapKey(string) added
* EventInformation.Arguments changed from object[] to IEnumerable<object>


- Version 2.0 Beta1 (v 2.0.1.0), 2012-11-30
* MbCache now targets .net framework 4.0
* AspNetCache removed
* InMemoryCache added
* Implementors of ICacheKey: Cache keys must not end with a separator
* CacheKeyBase.Separator removed. Not possible to override separator any longer.
* ICache removed from CacheBuilder ctor. If you want to explicitly set - use CacheBuilder.SetCache (defaults to InMemoryCache).
* ICacheKey removed from CacheBuilder ctor. If you want to explictly set - use CacheBuilder.SetCacheKey (defaults to ToStringCacheKey).
* Renamed MbCache.ProxyImpl.Castle.ProxyFactory to MbCache.ProxyImpl.Castle.CastleProxyFactory
* Renamed MbCache.ProxyImpl.Linfu.ProxyFactory to MbCache.ProxyImpl.Linfu.LinFuProxyFactory


- Version 1.7 (v 1.7.0.0), 2012-11-12


- Version 1.6 (v 1.6.0.0), 2012-08-05
* IStatistics removed. StatisticsEventListner introduced instead.
* ctor on CacheBuilder accepting an ILockObjectGenerator removed. CacheBuilder.SetLockObjectGenerator added instead.
* Changed IProxyFactory.Initialize. CacheAdapter instead of ICache is passed in.


- Version 1.5 (v 1.5.0.0), 2012-07-02


- Version 1.4 (v 1.4.0.0), 2012-06-18
* When creating unknown MbCache instance, ArgumentException is thrown instead of KeyValue not found.
* IMbCacheKey renamed to ICacheKey
* MbCacheKeyBase renamed to CacheKeyBase


- Version 1.3 (v 1.3.0.0), 2012-05-15


- Version 1.2 (v 1.2.0.0), 2012-05-01
* ICache.LockObjectGenerator removed
* ILockObjectGenerator added as parameter to IProxyFactory.Initialize
* AspNetCache ctor accepting ILockObjectGenerator removed
* CacheBuilder now have an overloaded ctor accepting an ILockObjectGenerator


- Version 1.1 (v 1.1.0.5)
* Added IMbCacheFactory.ImplementationTypeFor(Type)
* Support to cache null return values


- VERSION 1.1.CR1 -
* IProxyFactory.Create() now only accept reference types
* IMbCacheFactory.Create() now only accept reference types
* When As<IMyComponent>() is used in CacheBuilder, interface proxies now is created. To use old behaviour, class proxies, use AsImplemented() instead.


- VERSION 1.0.0 -

** Possible breaking change
* ICache.LockObjectGenerator added.


- VERSION 0.9.1 -

* Removed ICachingComponent.Invalidate<T>(Expression<Func<T, object>>. Use Invalidate<T>(Expression<Func<T, object>>, bool) instead.
* Removed IMbCacheFactory.Invalidate<T>(Expression<Func<T, object>>. Use Invalidate<T>(Expression<Func<T, object>>, bool) instead.


- VERSION 0.9 -

* string Key(Type type, ICachingComponent component, MethodInfo method, object[] parameters)
  ...changed to...
  string Key(Type type, ICachingComponent component, MethodInfo method, IEnumerable<object> parameters);


- VERSION 0.8 -

* IProxyFactory.Name removed
* IMbCacheKey completely changed. 
* MbCacheKeyBase completely changed
* Some API changes how to invalidate types, objects and methods. See Wiki for current syntax.
* Removed ICacheFactory, instead an ICache is injected directly to CacheBuilder
* CacheBuilder now accepts an ICacheFactory instance instead of a type string
* Better structure of namespaces.


- VERSION 0.6 -

* A MbCache.Configuration.IProxyFactory needs to be provided when building the mbfactory. 
This removes the strong dependency to Castle and other proxy framework can be used.
* Move objects needed to create mbfactory to CacheBuilder ctor instead of its BuildFactory method. 